/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
 * 
 * On Mon Mar 25 22:24:10 KST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRightArithmeticPipelined.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 42u };
static tUWide const UWide_literal_72_h2aaaaaaaaaaaaaaaaa(72u,
							 UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_2("FAILED %d correct values out of %d", 34u);
static std::string const __str_literal_3("FAILED Right Arithmetic Shift %b >> %d gave %b instead of %b",
					 60u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRightArithmeticPipelined::MOD_mkTbRightArithmeticPipelined(tSimStateHdl simHdl,
								   char const *name,
								   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bsrap_bsrp_inFifo(simHdl, "bsrap_bsrp_inFifo", this, 71u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_outFifo(simHdl, "bsrap_bsrp_outFifo", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_sReg1(simHdl,
			  "bsrap_bsrp_sReg1",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg2(simHdl,
			  "bsrap_bsrp_sReg2",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg3(simHdl,
			  "bsrap_bsrp_sReg3",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg4(simHdl,
			  "bsrap_bsrp_sReg4",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_bsrap_bsrp_sReg5(simHdl,
			  "bsrap_bsrp_sReg5",
			  this,
			  72u,
			  bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														   0u,
														   8u),
							    2u,
							    0u,
							    8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									       1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												  0u),
			  (tUInt8)0u),
    INST_correct(simHdl, "correct", this, 32u, 0u, (tUInt8)0u),
    INST_input_cycle(simHdl, "input_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_output_cycle(simHdl, "output_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomShift_init(simHdl, "randomShift_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal_init(simHdl, "randomVal_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_valFifo(simHdl, "valFifo", this, 70u, 10u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_bsrap_bsrp_sReg5___d5(72u),
    DEF_x__h5153(12297829382473034410llu),
    DEF_TASK_getRandom___d114(12297829382473034410llu),
    DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117(70u),
    DEF_bsrap_bsrp_sReg4___d60(72u),
    DEF_bsrap_bsrp_sReg3___d45(72u),
    DEF_bsrap_bsrp_sReg2___d32(72u),
    DEF_bsrap_bsrp_sReg1___d20(72u),
    DEF_bsrap_bsrp_inFifo_first____d11(71u),
    DEF_valFifo_first____d134(70u),
    DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78(72u),
    DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59(72u),
    DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44(72u),
    DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31(72u),
    DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19(72u),
    DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119(71u)
{
  symbol_count = 20u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRightArithmeticPipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "bsrap_bsrp_inFifo", SYM_MODULE, &INST_bsrap_bsrp_inFifo);
  init_symbol(&symbols[1u], "bsrap_bsrp_outFifo", SYM_MODULE, &INST_bsrap_bsrp_outFifo);
  init_symbol(&symbols[2u], "bsrap_bsrp_sReg1", SYM_MODULE, &INST_bsrap_bsrp_sReg1);
  init_symbol(&symbols[3u], "bsrap_bsrp_sReg2", SYM_MODULE, &INST_bsrap_bsrp_sReg2);
  init_symbol(&symbols[4u], "bsrap_bsrp_sReg3", SYM_MODULE, &INST_bsrap_bsrp_sReg3);
  init_symbol(&symbols[5u], "bsrap_bsrp_sReg4", SYM_MODULE, &INST_bsrap_bsrp_sReg4);
  init_symbol(&symbols[6u], "bsrap_bsrp_sReg5", SYM_MODULE, &INST_bsrap_bsrp_sReg5);
  init_symbol(&symbols[7u], "correct", SYM_MODULE, &INST_correct);
  init_symbol(&symbols[8u], "input_cycle", SYM_MODULE, &INST_input_cycle);
  init_symbol(&symbols[9u], "output_cycle", SYM_MODULE, &INST_output_cycle);
  init_symbol(&symbols[10u], "RL_bsrap_bsrp_shift", SYM_RULE);
  init_symbol(&symbols[11u], "RL_randomShift_initialize", SYM_RULE);
  init_symbol(&symbols[12u], "RL_randomVal_initialize", SYM_RULE);
  init_symbol(&symbols[13u], "RL_test_request", SYM_RULE);
  init_symbol(&symbols[14u], "RL_test_response", SYM_RULE);
  init_symbol(&symbols[15u], "randomShift_init", SYM_MODULE, &INST_randomShift_init);
  init_symbol(&symbols[16u], "randomVal_init", SYM_MODULE, &INST_randomVal_init);
  init_symbol(&symbols[17u], "valFifo", SYM_MODULE, &INST_valFifo);
  init_symbol(&symbols[18u], "x__h5375", SYM_DEF, &DEF_x__h5375, 32u);
  init_symbol(&symbols[19u], "x__h5731", SYM_DEF, &DEF_x__h5731, 32u);
}


/* Rule actions */

void MOD_mkTbRightArithmeticPipelined::RL_bsrap_bsrp_shift()
{
  tUInt8 DEF_bsrap_bsrp_sReg5_BIT_0___d80;
  tUInt8 DEF_bsrap_bsrp_sReg1_0_BIT_0___d23;
  tUInt8 DEF_bsrap_bsrp_sReg2_2_BIT_0___d35;
  tUInt8 DEF_bsrap_bsrp_sReg3_5_BIT_0___d48;
  tUInt8 DEF_bsrap_bsrp_sReg4_0_BIT_0___d63;
  tUInt64 DEF_x__h856;
  tUInt64 DEF_x__h536;
  tUInt64 DEF_x__h1153;
  tUInt64 DEF_x__h1541;
  tUInt64 DEF_x__h2109;
  tUInt64 DEF_x__h2991;
  tUInt64 DEF_operand__h538;
  tUInt64 DEF_operand__h3005;
  tUInt64 DEF_operand__h858;
  tUInt64 DEF_operand__h1155;
  tUInt64 DEF_operand__h1543;
  tUInt64 DEF_operand__h2111;
  DEF_bsrap_bsrp_sReg5___d5 = INST_bsrap_bsrp_sReg5.METH_read();
  DEF_operand__h3005 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg5___d5, 32u, 70u, 32u, 7u);
  DEF_bsrap_bsrp_sReg4___d60 = INST_bsrap_bsrp_sReg4.METH_read();
  DEF_operand__h2111 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg4___d60, 32u, 70u, 32u, 7u);
  DEF_bsrap_bsrp_sReg3___d45 = INST_bsrap_bsrp_sReg3.METH_read();
  DEF_operand__h1543 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg3___d45, 32u, 70u, 32u, 7u);
  DEF_bsrap_bsrp_sReg2___d32 = INST_bsrap_bsrp_sReg2.METH_read();
  DEF_operand__h1155 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg2___d32, 32u, 70u, 32u, 7u);
  DEF_bsrap_bsrp_inFifo_first____d11 = INST_bsrap_bsrp_inFifo.METH_first();
  DEF_operand__h538 = primExtract64(64u, 71u, DEF_bsrap_bsrp_inFifo_first____d11, 32u, 70u, 32u, 7u);
  DEF_x__h536 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
								     1u,
								     1u) ? (((tUInt64)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																	    0u,
																	    1u))) << 63u) | primExtract64(63u,
																					  71u,
																					  DEF_bsrap_bsrp_inFifo_first____d11,
																					  32u,
																					  70u,
																					  32u,
																					  8u) : DEF_operand__h538;
  DEF_bsrap_bsrp_sReg1___d20 = INST_bsrap_bsrp_sReg1.METH_read();
  DEF_operand__h858 = primExtract64(64u, 72u, DEF_bsrap_bsrp_sReg1___d20, 32u, 70u, 32u, 7u);
  DEF_bsrap_bsrp_inFifo_notEmpty____d1 = INST_bsrap_bsrp_inFifo.METH_notEmpty();
  DEF_bsrap_bsrp_sReg4_0_BIT_0___d63 = DEF_bsrap_bsrp_sReg4___d60.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h2109 = DEF_bsrap_bsrp_sReg4___d60.get_bits_in_word8(0u,
							      5u,
							      1u) ? ((((((((((((((((((tUInt64)((tUInt8)((DEF_bsrap_bsrp_sReg4_0_BIT_0___d63 ? 32768u : 0u) >> 15u))) << 63u) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 62u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 61u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 59u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 57u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 56u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 55u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 54u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 53u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 52u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 51u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 50u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 49u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg4_0_BIT_0___d63)) << 48u)) | primExtract64(48u,
																																																																																																																																								 72u,
																																																																																																																																								 DEF_bsrap_bsrp_sReg4___d60,
																																																																																																																																								 32u,
																																																																																																																																								 70u,
																																																																																																																																								 32u,
																																																																																																																																								 23u) : DEF_operand__h2111;
  DEF_bsrap_bsrp_sReg3_5_BIT_0___d48 = DEF_bsrap_bsrp_sReg3___d45.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h1541 = DEF_bsrap_bsrp_sReg3___d45.get_bits_in_word8(0u,
							      4u,
							      1u) ? ((((((((((tUInt64)((tUInt8)((DEF_bsrap_bsrp_sReg3_5_BIT_0___d48 ? (tUInt8)128u : (tUInt8)0u) >> 7u))) << 63u) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 62u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 61u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 59u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 57u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg3_5_BIT_0___d48)) << 56u)) | primExtract64(56u,
																																																																												      72u,
																																																																												      DEF_bsrap_bsrp_sReg3___d45,
																																																																												      32u,
																																																																												      70u,
																																																																												      32u,
																																																																												      15u) : DEF_operand__h1543;
  DEF_bsrap_bsrp_sReg2_2_BIT_0___d35 = DEF_bsrap_bsrp_sReg2___d32.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h1153 = DEF_bsrap_bsrp_sReg2___d32.get_bits_in_word8(0u,
							      3u,
							      1u) ? ((((((tUInt64)((tUInt8)((DEF_bsrap_bsrp_sReg2_2_BIT_0___d35 ? (tUInt8)8u : (tUInt8)0u) >> 3u))) << 63u) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_2_BIT_0___d35)) << 62u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_2_BIT_0___d35)) << 61u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg2_2_BIT_0___d35)) << 60u)) | primExtract64(60u,
																																														72u,
																																														DEF_bsrap_bsrp_sReg2___d32,
																																														32u,
																																														70u,
																																														32u,
																																														11u) : DEF_operand__h1155;
  DEF_bsrap_bsrp_sReg1_0_BIT_0___d23 = DEF_bsrap_bsrp_sReg1___d20.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h856 = DEF_bsrap_bsrp_sReg1___d20.get_bits_in_word8(0u,
							     2u,
							     1u) ? ((((tUInt64)((tUInt8)((DEF_bsrap_bsrp_sReg1_0_BIT_0___d23 ? (tUInt8)2u : (tUInt8)0u) >> 1u))) << 63u) | (((tUInt64)(DEF_bsrap_bsrp_sReg1_0_BIT_0___d23)) << 62u)) | primExtract64(62u,
																														     72u,
																														     DEF_bsrap_bsrp_sReg1___d20,
																														     32u,
																														     70u,
																														     32u,
																														     9u) : DEF_operand__h858;
  DEF_bsrap_bsrp_sReg5_BIT_71___d6 = DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(2u, 7u, 1u);
  DEF_bsrap_bsrp_sReg5_BIT_0___d80 = DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(0u, 0u, 1u);
  DEF_x__h2991 = DEF_bsrap_bsrp_sReg5___d5.get_bits_in_word8(0u,
							     6u,
							     1u) ? ((((((((((((((((((((((((((((((((((tUInt64)((tUInt8)((DEF_bsrap_bsrp_sReg5_BIT_0___d80 ? 2147483648u : 0u) >> 31u))) << 63u) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 62u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 61u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 60u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 59u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 58u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 57u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 56u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 55u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 54u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 53u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 52u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 51u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 50u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 49u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 48u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 47u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 46u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 45u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 44u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 43u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 42u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 41u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 40u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 39u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 38u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 37u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 36u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 35u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 34u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 33u)) | (((tUInt64)(DEF_bsrap_bsrp_sReg5_BIT_0___d80)) << 32u)) | (tUInt64)(primExtract32(32u,
																																																																																																																																																																																																																																																											       72u,
																																																																																																																																																																																																																																																											       DEF_bsrap_bsrp_sReg5___d5,
																																																																																																																																																																																																																																																											       32u,
																																																																																																																																																																																																																																																											       70u,
																																																																																																																																																																																																																																																											       32u,
																																																																																																																																																																																																																																																											       39u)) : DEF_operand__h3005;
  DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg4___d60.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h2109 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h2109 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h2109)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg4___d60.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg3___d45.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h1541 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h1541 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h1541)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg3___d45.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg2___d32.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h1153 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h1153 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h1153)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg2___d32.get_bits_in_word8(0u,
																											     0u,
																											     7u)),
														      0u);
  DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_sReg1___d20.get_bits_in_word8(2u,
																	      7u,
																	      1u) << 7u) | (tUInt8)(DEF_x__h856 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h856 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h856)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_sReg1___d20.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_inFifo_notEmpty____d1 << 7u) | (tUInt8)(DEF_x__h536 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h536 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h536)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																												    0u,
																												    7u)),
														      0u);
  INST_bsrap_bsrp_sReg1.METH_write(DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19);
  if (DEF_bsrap_bsrp_inFifo_notEmpty____d1)
    INST_bsrap_bsrp_inFifo.METH_deq();
  INST_bsrap_bsrp_sReg2.METH_write(DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31);
  INST_bsrap_bsrp_sReg3.METH_write(DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44);
  INST_bsrap_bsrp_sReg4.METH_write(DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59);
  INST_bsrap_bsrp_sReg5.METH_write(DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78);
  if (DEF_bsrap_bsrp_sReg5_BIT_71___d6)
    INST_bsrap_bsrp_outFifo.METH_enq(DEF_x__h2991);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomVal_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3735928559llu);
  INST_randomVal_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomShift_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3405691582llu);
  INST_randomShift_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_request()
{
  tUInt32 DEF_x__h5356;
  tUInt8 DEF_x__h5328;
  tUInt8 DEF_x__h5299;
  DEF_x__h5375 = INST_input_cycle.METH_read();
  DEF_x__h5356 = DEF_x__h5375 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_TASK_getRandom___d114 = getRandom();
  DEF_x__h5328 = (tUInt8)(DEF_TASK_getRandom___d114 >> 63u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h5153 = getRandom();
  DEF_x__h5299 = (tUInt8)((tUInt8)63u & DEF_x__h5153);
  DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d114 >> 58u),
										 2u,
										 0u,
										 6u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d114 >> 26u),
												    1u).set_whole_word((((tUInt32)(67108863u & DEF_TASK_getRandom___d114)) << 6u) | (tUInt32)(DEF_x__h5299),
														       0u);
  DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d114 >> 57u),
										 2u,
										 0u,
										 7u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d114 >> 25u),
												    1u).set_whole_word(((((tUInt32)(33554431u & DEF_TASK_getRandom___d114)) << 7u) | (((tUInt32)(DEF_x__h5299)) << 1u)) | (tUInt32)(DEF_x__h5328),
														       0u);
  INST_valFifo.METH_enq(DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117);
  INST_bsrap_bsrp_inFifo.METH_enq(DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119);
  INST_input_cycle.METH_write(DEF_x__h5356);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_response()
{
  tUInt32 DEF_x__h5727;
  tUInt32 DEF_x__h5598;
  tUInt8 DEF_output_cycle_21_EQ_128_22_AND_correct_27_EQ_12_ETC___d129;
  tUInt8 DEF_output_cycle_21_EQ_128_22_AND_NOT_correct_27_E_ETC___d131;
  tUInt8 DEF_NOT_output_cycle_21_EQ_128_22_32_AND_bsrap_bsr_ETC___d139;
  tUInt8 DEF_NOT_output_cycle_21_EQ_128_22___d132;
  tUInt8 DEF_NOT_output_cycle_21_EQ_128_22_32_AND_NOT_bsrap_ETC___d142;
  tUInt8 DEF_correct_27_EQ_128___d128;
  tUInt64 DEF_trueResult__h5526;
  tUInt8 DEF_valFifo_first__34_BITS_5_TO_0___d136;
  tUInt64 DEF_val__h5523;
  tUInt64 DEF_v__h5462;
  tUInt32 DEF_x__h5617;
  tUInt8 DEF_bsrap_bsrp_outFifo_first__33_EQ_valFifo_first__ETC___d138;
  DEF_x__h5731 = INST_output_cycle.METH_read();
  DEF_x__h5617 = INST_correct.METH_read();
  DEF_valFifo_first____d134 = INST_valFifo.METH_first();
  DEF_v__h5462 = INST_bsrap_bsrp_outFifo.METH_first();
  DEF_val__h5523 = primExtract64(64u, 70u, DEF_valFifo_first____d134, 32u, 69u, 32u, 6u);
  DEF_valFifo_first__34_BITS_5_TO_0___d136 = DEF_valFifo_first____d134.get_bits_in_word8(0u, 0u, 6u);
  DEF_trueResult__h5526 = primShiftRA64(64u,
					64u,
					(tUInt64)(DEF_val__h5523),
					6u,
					(tUInt8)(DEF_valFifo_first__34_BITS_5_TO_0___d136));
  DEF_bsrap_bsrp_outFifo_first__33_EQ_valFifo_first__ETC___d138 = DEF_v__h5462 == DEF_trueResult__h5526;
  DEF_correct_27_EQ_128___d128 = DEF_x__h5617 == 128u;
  DEF_output_cycle_21_EQ_128___d122 = DEF_x__h5731 == 128u;
  DEF_NOT_output_cycle_21_EQ_128_22___d132 = !DEF_output_cycle_21_EQ_128___d122;
  DEF_NOT_output_cycle_21_EQ_128_22_32_AND_NOT_bsrap_ETC___d142 = DEF_NOT_output_cycle_21_EQ_128_22___d132 && !DEF_bsrap_bsrp_outFifo_first__33_EQ_valFifo_first__ETC___d138;
  DEF_NOT_output_cycle_21_EQ_128_22_32_AND_bsrap_bsr_ETC___d139 = DEF_NOT_output_cycle_21_EQ_128_22___d132 && DEF_bsrap_bsrp_outFifo_first__33_EQ_valFifo_first__ETC___d138;
  DEF_output_cycle_21_EQ_128_22_AND_NOT_correct_27_E_ETC___d131 = DEF_output_cycle_21_EQ_128___d122 && !DEF_correct_27_EQ_128___d128;
  DEF_output_cycle_21_EQ_128_22_AND_correct_27_EQ_12_ETC___d129 = DEF_output_cycle_21_EQ_128___d122 && DEF_correct_27_EQ_128___d128;
  DEF_x__h5598 = DEF_x__h5617 + 1u;
  DEF_x__h5727 = DEF_x__h5731 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_output_cycle_21_EQ_128_22_AND_correct_27_EQ_12_ETC___d129)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_output_cycle_21_EQ_128_22_AND_correct_27_EQ_12_ETC___d129)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_output_cycle_21_EQ_128_22_AND_NOT_correct_27_E_ETC___d131)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_2, DEF_x__h5617, DEF_x__h5731);
    if (DEF_output_cycle_21_EQ_128_22_AND_NOT_correct_27_E_ETC___d131)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_21_EQ_128_22___d132)
    INST_bsrap_bsrp_outFifo.METH_deq();
  if (DEF_NOT_output_cycle_21_EQ_128_22_32_AND_bsrap_bsr_ETC___d139)
    INST_correct.METH_write(DEF_x__h5598);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_output_cycle_21_EQ_128_22_32_AND_NOT_bsrap_ETC___d142)
      dollar_display(sim_hdl,
		     this,
		     "s,64,6,64,64",
		     &__str_literal_3,
		     DEF_val__h5523,
		     DEF_valFifo_first__34_BITS_5_TO_0___d136,
		     DEF_v__h5462,
		     DEF_trueResult__h5526);
    if (DEF_NOT_output_cycle_21_EQ_128_22_32_AND_NOT_bsrap_ETC___d142)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_21_EQ_128_22___d132)
    INST_valFifo.METH_deq();
  if (DEF_NOT_output_cycle_21_EQ_128_22___d132)
    INST_output_cycle.METH_write(DEF_x__h5727);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRightArithmeticPipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_valFifo.reset_RST(ARG_rst_in);
  INST_randomVal_init.reset_RST(ARG_rst_in);
  INST_randomShift_init.reset_RST(ARG_rst_in);
  INST_output_cycle.reset_RST(ARG_rst_in);
  INST_input_cycle.reset_RST(ARG_rst_in);
  INST_correct.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg5.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg4.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg3.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg2.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_sReg1.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_outFifo.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_inFifo.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRightArithmeticPipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRightArithmeticPipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bsrap_bsrp_inFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_outFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg1.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg2.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg3.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg4.dump_state(indent + 2u);
  INST_bsrap_bsrp_sReg5.dump_state(indent + 2u);
  INST_correct.dump_state(indent + 2u);
  INST_input_cycle.dump_state(indent + 2u);
  INST_output_cycle.dump_state(indent + 2u);
  INST_randomShift_init.dump_state(indent + 2u);
  INST_randomVal_init.dump_state(indent + 2u);
  INST_valFifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRightArithmeticPipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 35u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom___d114", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_first____d11", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg1___d20", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg2___d32", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg3___d45", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg4___d60", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg5_BIT_71___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_sReg5___d5", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "output_cycle_21_EQ_128___d122", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "valFifo_first____d134", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5153", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5375", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5731", 32u);
  num = INST_bsrap_bsrp_inFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_outFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg1.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg2.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg3.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg4.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_sReg5.dump_VCD_defs(num);
  num = INST_correct.dump_VCD_defs(num);
  num = INST_input_cycle.dump_VCD_defs(num);
  num = INST_output_cycle.dump_VCD_defs(num);
  num = INST_randomShift_init.dump_VCD_defs(num);
  num = INST_randomVal_init.dump_VCD_defs(num);
  num = INST_valFifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRightArithmeticPipelined::dump_VCD(tVCDDumpType dt,
						unsigned int levels,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRightArithmeticPipelined::vcd_defs(tVCDDumpType dt,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117) != DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117, 70u);
	backing.DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117 = DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119) != DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119, 71u);
	backing.DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119 = DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom___d114) != DEF_TASK_getRandom___d114)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom___d114, 64u);
	backing.DEF_TASK_getRandom___d114 = DEF_TASK_getRandom___d114;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_first____d11) != DEF_bsrap_bsrp_inFifo_first____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
	backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19) != DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19, 72u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1) != DEF_bsrap_bsrp_inFifo_notEmpty____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31) != DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31, 72u);
	backing.DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31 = DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg1___d20) != DEF_bsrap_bsrp_sReg1___d20)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg1___d20, 72u);
	backing.DEF_bsrap_bsrp_sReg1___d20 = DEF_bsrap_bsrp_sReg1___d20;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44) != DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44, 72u);
	backing.DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44 = DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg2___d32) != DEF_bsrap_bsrp_sReg2___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg2___d32, 72u);
	backing.DEF_bsrap_bsrp_sReg2___d32 = DEF_bsrap_bsrp_sReg2___d32;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59) != DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59, 72u);
	backing.DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59 = DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg3___d45) != DEF_bsrap_bsrp_sReg3___d45)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg3___d45, 72u);
	backing.DEF_bsrap_bsrp_sReg3___d45 = DEF_bsrap_bsrp_sReg3___d45;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78) != DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78, 72u);
	backing.DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78 = DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg4___d60) != DEF_bsrap_bsrp_sReg4___d60)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg4___d60, 72u);
	backing.DEF_bsrap_bsrp_sReg4___d60 = DEF_bsrap_bsrp_sReg4___d60;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg5_BIT_71___d6) != DEF_bsrap_bsrp_sReg5_BIT_71___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg5_BIT_71___d6, 1u);
	backing.DEF_bsrap_bsrp_sReg5_BIT_71___d6 = DEF_bsrap_bsrp_sReg5_BIT_71___d6;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_sReg5___d5) != DEF_bsrap_bsrp_sReg5___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_sReg5___d5, 72u);
	backing.DEF_bsrap_bsrp_sReg5___d5 = DEF_bsrap_bsrp_sReg5___d5;
      }
      ++num;
      if ((backing.DEF_output_cycle_21_EQ_128___d122) != DEF_output_cycle_21_EQ_128___d122)
      {
	vcd_write_val(sim_hdl, num, DEF_output_cycle_21_EQ_128___d122, 1u);
	backing.DEF_output_cycle_21_EQ_128___d122 = DEF_output_cycle_21_EQ_128___d122;
      }
      ++num;
      if ((backing.DEF_valFifo_first____d134) != DEF_valFifo_first____d134)
      {
	vcd_write_val(sim_hdl, num, DEF_valFifo_first____d134, 70u);
	backing.DEF_valFifo_first____d134 = DEF_valFifo_first____d134;
      }
      ++num;
      if ((backing.DEF_x__h5153) != DEF_x__h5153)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5153, 64u);
	backing.DEF_x__h5153 = DEF_x__h5153;
      }
      ++num;
      if ((backing.DEF_x__h5375) != DEF_x__h5375)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5375, 32u);
	backing.DEF_x__h5375 = DEF_x__h5375;
      }
      ++num;
      if ((backing.DEF_x__h5731) != DEF_x__h5731)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5731, 32u);
	backing.DEF_x__h5731 = DEF_x__h5731;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117, 70u);
      backing.DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117 = DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d117;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119, 71u);
      backing.DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119 = DEF_TASK_getRandom_14_CONCAT_TASK_getRandom_15_BIT_ETC___d119;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom___d114, 64u);
      backing.DEF_TASK_getRandom___d114 = DEF_TASK_getRandom___d114;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
      backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19, 72u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31, 72u);
      backing.DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31 = DEF_bsrap_bsrp_sReg1_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d31;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg1___d20, 72u);
      backing.DEF_bsrap_bsrp_sReg1___d20 = DEF_bsrap_bsrp_sReg1___d20;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44, 72u);
      backing.DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44 = DEF_bsrap_bsrp_sReg2_2_BIT_71_3_CONCAT_IF_bsrap_bs_ETC___d44;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg2___d32, 72u);
      backing.DEF_bsrap_bsrp_sReg2___d32 = DEF_bsrap_bsrp_sReg2___d32;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59, 72u);
      backing.DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59 = DEF_bsrap_bsrp_sReg3_5_BIT_71_6_CONCAT_IF_bsrap_bs_ETC___d59;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg3___d45, 72u);
      backing.DEF_bsrap_bsrp_sReg3___d45 = DEF_bsrap_bsrp_sReg3___d45;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78, 72u);
      backing.DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78 = DEF_bsrap_bsrp_sReg4_0_BIT_71_1_CONCAT_IF_bsrap_bs_ETC___d78;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg4___d60, 72u);
      backing.DEF_bsrap_bsrp_sReg4___d60 = DEF_bsrap_bsrp_sReg4___d60;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg5_BIT_71___d6, 1u);
      backing.DEF_bsrap_bsrp_sReg5_BIT_71___d6 = DEF_bsrap_bsrp_sReg5_BIT_71___d6;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_sReg5___d5, 72u);
      backing.DEF_bsrap_bsrp_sReg5___d5 = DEF_bsrap_bsrp_sReg5___d5;
      vcd_write_val(sim_hdl, num++, DEF_output_cycle_21_EQ_128___d122, 1u);
      backing.DEF_output_cycle_21_EQ_128___d122 = DEF_output_cycle_21_EQ_128___d122;
      vcd_write_val(sim_hdl, num++, DEF_valFifo_first____d134, 70u);
      backing.DEF_valFifo_first____d134 = DEF_valFifo_first____d134;
      vcd_write_val(sim_hdl, num++, DEF_x__h5153, 64u);
      backing.DEF_x__h5153 = DEF_x__h5153;
      vcd_write_val(sim_hdl, num++, DEF_x__h5375, 32u);
      backing.DEF_x__h5375 = DEF_x__h5375;
      vcd_write_val(sim_hdl, num++, DEF_x__h5731, 32u);
      backing.DEF_x__h5731 = DEF_x__h5731;
    }
}

void MOD_mkTbRightArithmeticPipelined::vcd_prims(tVCDDumpType dt,
						 MOD_mkTbRightArithmeticPipelined &backing)
{
  INST_bsrap_bsrp_inFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_inFifo);
  INST_bsrap_bsrp_outFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_outFifo);
  INST_bsrap_bsrp_sReg1.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg1);
  INST_bsrap_bsrp_sReg2.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg2);
  INST_bsrap_bsrp_sReg3.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg3);
  INST_bsrap_bsrp_sReg4.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg4);
  INST_bsrap_bsrp_sReg5.dump_VCD(dt, backing.INST_bsrap_bsrp_sReg5);
  INST_correct.dump_VCD(dt, backing.INST_correct);
  INST_input_cycle.dump_VCD(dt, backing.INST_input_cycle);
  INST_output_cycle.dump_VCD(dt, backing.INST_output_cycle);
  INST_randomShift_init.dump_VCD(dt, backing.INST_randomShift_init);
  INST_randomVal_init.dump_VCD(dt, backing.INST_randomVal_init);
  INST_valFifo.dump_VCD(dt, backing.INST_valFifo);
}
